#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshProperties> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

    float4x4 trmat  = _Properties[id.x].trmat;
    float4x4 oscmat = _Properties[id.x].oscmat;
    float4x4 scmat  = _Properties[id.x].scmat;
    float3 ascale   = float3(scmat[0][0], scmat[1][1], scmat[2][2]);
    float3 oscale   = float3(oscmat[0][0], oscmat[1][1], oscmat[2][2]);
    int index       = int(_Properties[id.x].data.x);

    float rnd       = random3(float3(index, index * 1.5, index * 4.5));

    int maxTime     = rnd * 8.0 + 0.15;
    float time      = _Time + rnd * 10.0;
    float mod       = (time %  maxTime);
    float normTime  = mod / maxTime;
    float loop      = floor(time / maxTime) + 1.0;
    float easedTime = outCubic(abs(normTime * 2.0 - 1.0));

    float aloop     = _Properties[id.x].data.z;
    if(aloop == loop) {
    }else{
        _Properties[id.x].data.z = loop; 
    }

    float rndColor  = random3(float3((index + loop), (index + loop) * 1.5, (index + loop) * 4.5));

    float3 position = _Position[index];;
    // float3 position = float3(trmat[0][3], trmat[1][3], trmat[2][3]);


    float noiseScale0   = 1.5f;
    float noiseScale1   = 4.5f;
    float noiseSpeed0   = 0.01;
    float noiseSpeed1   = 0.5;
    float maxScale      = 10.0;

    //rotate shape on a curl noise
    float3 dir          = curlNoise(position * noiseScale0 + _Time * noiseSpeed0);
    float avdir         = (dir.x + dir.y + dir.z) / 3.0;
    float3 up           = float3(0, 1, 0);
    float upDotDir      = dot(up, dir);
    float angle         = abs(acos(upDotDir));
    float3 axis         = normalize(cross(up, dir));
    float4x4 rotation   = AngleAxis4x4(angle, axis);

    // float normy         = position.y / 1.8;
    float noiseSc      = curlNoise(position * noiseScale1 + _Time * noiseSpeed1).x * 0.5 + 0.5;
    float noiseColor    = noiseSc; 
    noiseSc             = outCubic(noiseSc);
    float3 newScale     =  oscale * float3(noiseSc, noiseSc * maxScale, noiseSc);

    position            =  mul(_TRS, float4(position, 1)).xyz;
    float4x4 transform = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );

    float4x4 scale = float4x4(
        newScale.x, 0, 0, 0,
        0, newScale.y, 0, 0,
        0, 0, newScale.z, 0,
        0, 0, 0, 1
    );

    _Properties[id.x].trmat     = transform;
    _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale; 
    // _Properties[id.x].color.a   = easedTime;
    _Properties[id.x].data.y    = rndColor;
    _Properties[id.x].data.w    = noiseColor;
}
