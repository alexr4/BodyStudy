#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"
#define PI 3.14159265359

uniform RWStructuredBuffer<MeshPropertiesPhysisc> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform Texture2D<float4> _BodyRamp;
uniform float2 _RampSize;
uniform  float _DeltaTime;
uniform float3 _Wind;
uniform float _MaxInstance;
uniform float _MaxSize;


float3 seek(float3 target, float3 position, float3 vel, float maxForce, float maxSpeed){
    //seek
    float3 desired      = target - position;
    desired             *= maxForce;
    // float3 desired             = normalize(desired)* maxForce;

    float3 steer        = (desired - vel);
    steer               *= maxSpeed;
    // steer               = (length(steer) > maxSpeed) ? normalize(steer) * maxSpeed : steer;
    return steer;
}

float3 separate(int id, float3 position, float3 vel, float3 size, float maxForce, float maxSpeed){
    //separation
    float minDist   = 0.035 * noise(_Time);;
    float3 sep              = float3(0, 0, 0);
    int count               = 0;
    for(int i=0; i<int(_MaxInstance); i++){
        if(i != id.x){
            float4x4 neitrmat       = _Properties[i].trmat;
            float4 neiopos          = _Properties[i].opos;
            float3 neivel           = _Properties[i].vel.xyz;
            float3 neiposition      = float3(neitrmat[0][3], neitrmat[1][3], neitrmat[2][3]);
            int neiindex            = int(_Properties[i].data.x);

            float neinormy          = saturate(neiopos.y / 1.8);
            uint3 neiuvramp         = uint3(neinormy * _RampSize.x, 0.5 * _RampSize.y, 0);
            float neirampSize       = _BodyRamp.Load(neiuvramp);
        
            float3 neisize          = _MinScale + float3(neirampSize, neirampSize, neirampSize) * (_MaxScale - _MinScale);
            float desiredSep        = size.y * 0.5 * _MaxSize + neisize.y * 0.5 * _MaxSize;

            float dist              = distance(position, neiposition);
            if( dist < minDist){
                float3 diff         = position - neiposition;
                diff                = normalize(diff);
                diff                /= dist;
                sep                 += diff;
                count ++;
            }
        }
    }

    if(count > 0){
        sep     /= count;
        sep     = normalize(sep);
        sep     *= maxForce;
        sep     -= vel;
        // sep      =(length(sep) > maxSpeed) ? normalize(sep) * maxSpeed : sep;
    }
    return sep;
}

float3 align(int id, float3 position, float3 vel, float maxForce, float maxSpeed){
    float minDist   = 0.035 * noise(_Time);
    float3 sum      = float3(0, 0, 0);
    float count     = 0;
    for(int i=0; i<int(_MaxInstance); i++){
        if(i != id.x){
            float4x4 neitrmat       = _Properties[i].trmat;
            float3 neivel           = _Properties[i].vel.xyz;
            float3 neiposition      = float3(neitrmat[0][3], neitrmat[1][3], neitrmat[2][3]);

            float dist              = distance(position, neiposition);
            if(dist < minDist){
                sum += neivel;
                count ++;
            }
        }
    }

    if(count > 0){
        sum             /= count;
        sum             = normalize(sum);
        sum             *= maxForce;
        float3 steer    = sum - vel;
        steer           = (length(steer) > maxSpeed) ? normalize(steer) * maxSpeed : steer;
        return steer;
    }else{
        return float3(0, 0, 0);
    }
}

float3 cohesion(int id, float3 position, float3 vel, float maxForce, float maxSpeed){
    float minDist   = 0.05 * noise(_Time);;
    float3 sum      = float3(0, 0, 0);
    float count     = 0;
    for(int i=0; i<int(_MaxInstance); i++){
        if(i != id.x){
            float4x4 neitrmat       = _Properties[i].trmat;
            float3 neiposition      = float3(neitrmat[0][3], neitrmat[1][3], neitrmat[2][3]);

            float dist              = distance(position, neiposition);
            if(dist < minDist){
                sum += neiposition;
                count ++;
            }
        }
    }

    if(count > 0){
        sum             /= count;
        return seek(sum, position, vel, maxForce, maxSpeed);
    }else{
        return float3(0, 0, 0);
    }
}


// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 trmat          = _Properties[id.x].trmat;
    float4x4 rotation       = _Properties[id.x].rotmat;
    float4x4 oscmat         = _Properties[id.x].oscmat;
    float4x4 scmat          = _Properties[id.x].scmat;

    float4 opos             = _Properties[id.x].opos;
    float3 vel              = _Properties[id.x].vel.xyz;
    float3 acc              = _Properties[id.x].acc.xyz;
    float3 position         = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    float3 pivot            = float3(_TRS[0][3], _TRS[1][3], _TRS[2][3]);
    float3 modelDesc        = float3(oscmat[0][0], oscmat[1][1], oscmat[2][2]);
    int index               = int(_Properties[id.x].data.x);

    // float rnd               = random3(float3(index, index * 1.5, index * 4.5));
    // float rnd2              = random3(float3(index + 45645, index * 1563.5, index * 4687.5));
    float maxTime           = opos.w * 4.0 + 8.0;//rnd * 10.0 + 5.0;
    float time              = _Time + opos.w * 12.0; 
    float loop              = floor(time % maxTime);
    float rndPerLoop        = random(loop);
    float isAnimated        = step(0.75, rndPerLoop);

    // //size management
    float normy         = saturate(opos.y / _World.y);
    uint3 uvramp        = uint3(normy * _RampSize.x, 0.5 * _RampSize.y, 0);
    float rampSize      = _BodyRamp.Load(uvramp);
 
    float3 size         = (_MinScale + rampSize * (_MaxScale - _MinScale)) * modelDesc;

    
    /*
    acc += Forces / Mass;
    vel += acc;
    vel.mag <= maxSpeed
    pos += vel;
    acc *= 0;
    */
    float rndForceOff   = (rampSize +  opos.w) * 0.5;
    float minForce      = 0.75;
    float maxForce      = 0.85;
    float minSpeed      = 0.065;
    float maxSpeed      = 0.075;
    
    float minmaxForce   = 0.75;//lerp(minForce, maxForce, 1.0 - rndForceOff);
    float minmaxSpeed   = 0.075;//lerp(minSpeed, maxSpeed, rndForceOff);

    float3 target       = mul(_TRS, float4(_Position[index].xyz, 1)).xyz;
    float3 steer        = seek(target, position, vel, minmaxForce, minmaxSpeed);
    float3 sep          = separate(int(id.x), position, vel, size, minmaxForce, minmaxSpeed);
    float3 ali          = align(int(id.x), position, vel, minmaxForce, minmaxSpeed);
    float3 cohe         = cohesion(int(id.x), position, vel, minmaxForce, minmaxSpeed);
    
    //curl
    float curlInc           = 1.0f;
    float curlSpeed         = 0.0005f;
    float curlScale         = 0.01f;
    float3 curl             = curlNoise(position * curlInc + time * curlSpeed);
    
    float noisedCol         = noise(opos.xyz * 4.0 + opos.w);

    acc                 += steer * 0.001;
    acc                 += sep * 0.00125;
    acc                 += ali * 0.0025;
    acc                 += cohe * 0.25;
    acc                 += curl * curlScale * 0.001;
    
    vel                 += acc;
    vel                 = (length(vel) > minmaxSpeed) ? normalize(vel) * minmaxSpeed : vel;
    position            += vel;// * 0.1;
    acc                 *= 0.0;


    //edge
    float3 subPos   = position - pivot;
    if(position.x < pivot.x - _World.x * 0.5
    || position.x > pivot.x + _World.x * 0.5
    || position.y < pivot.y + 0
    || position.y > pivot.y + _World.y
    || position.z < pivot.z - _World.z * 0.5
    || position.z > pivot.z + _World.z * 0.5 ){
        position = mul(_TRS, float4(_Position[index].xyz, 1)).xyz;
        // vel      = float3(  random3(position.xyz + time),
        //                     random3(position.xyz + time + opos.w),
        //                     random3(position.xyz + time + opos.w + index)) * 2.0 - 1.0;
    }
 
    float centerBox = float3(0, _World.y * 0.25, 0);
    float SDFBox    = sdBox(subPos-centerBox, float3(_World.x *0.5, _World.y * 0.5, _World.z * 0.5), 0);
    SDFBox          = smoothstep(0, 0.25, abs(SDFBox));
    size            *= SDFBox;

    float3 dir          = normalize(vel);
    float3 up           = float3(0, 1, 0);
    float upDotDir      = dot(up, dir);
    float angle         = acos(upDotDir);
    float3 axis         = normalize(cross(up, dir));
    rotation            = AngleAxis4x4(angle, axis);

    float4x4 transform      = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );
    
    float4x4 scale         = float4x4(
        size.x  , 0     , 0     , 0,
        0       , size.y, 0     , 0,
        0       , 0     , size.z, 0,
        0       , 0     , 0     , 1
    );

    _Properties[id.x].trmat     = transform;
    _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale;
    _Properties[id.x].vel       = float4(vel, 0.0);
    _Properties[id.x].acc       = float4(acc, 0.0);
    _Properties[id.x].color.a   = SDFBox;
    _Properties[id.x].data.y    = 0;
    _Properties[id.x].data.w    = 0;
}
