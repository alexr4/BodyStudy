#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshPropertiesPhysisc> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform Texture2D<float4> _BodyRamp;
uniform float2 _RampSize;
uniform float3 _Wind;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 trmat          = _Properties[id.x].trmat;
    float4x4 rotation       = _Properties[id.x].rotmat;
    float4x4 ortmat         = _Properties[id.x].oscmat;
    float4x4 scmat          = _Properties[id.x].scmat;

    float3 opos             = _Properties[id.x].opos;
    float3 vel              = _Properties[id.x].vel;
    float3 acc              = _Properties[id.x].acc;
    float3 position         = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    int index               = int(_Properties[id.x].data.x);
    float rndPerInstance    = _Properties[id.x].data.w;

    float rnd               = random3(float3(index, index * 1.5, index * 4.5));
    float maxTime           = rndPerInstance * 4.0 + 2.0;//rnd * 10.0 + 5.0;
    float time              = _Time + rnd * 5.0;
    float mod               = (time %  maxTime);
    float normTime          = mod / maxTime;
    float loop              = floor(time / maxTime) + 1;

    float aloop         = _Properties[id.x].data.z;
    float randPerLoop   = random(float(loop + index + rndPerInstance));
    if(aloop == loop) {
    }else{
        _Properties[id.x].data.z = loop;
        if(loop % 2 == 0){
            _Properties[id.x].data.y    = 0;
        }else{
            _Properties[id.x].data.y    = 1;
        }
        
        normTime                 = 1;
        mod                      = 1;
        _Properties[id.x].acc.w  = 0;
    }
    float easedGrowth       = outElastic(normTime, 8.0);//1.0 - abs(normTime * 2.0 - 1.0));
    float easedFall         = saturate(outQuad(1.0 - normTime));
    
    //size management
    float normy         = saturate(opos.y / _World.y);
    uint3 uvramp        = uint3(normy * _RampSize.x, 0.5 * _RampSize.y, 0);
    float rampSize      = _BodyRamp.Load(uvramp);
 
    // float3 newOriScale  = (_MinScale + randPerLoop * (_MaxScale - _MinScale)) * float3(1, 1, 1);
    float3 size         = _MinScale + float3(rampSize, rampSize, rampSize) * (_MaxScale - _MinScale);
    size.x              *= _ModelDescription.x;
    size.y              *= _ModelDescription.y;
    size.z              *= _ModelDescription.z;

    float VATTime = 0;
    if(aloop % 2 == 0){
        float3 gravity  = float3(0, -0.01, 0.0);
        float3 wind     = _Wind * 0.001;

        //friction has a problem, and i haven't the time to find it
        float3 friction     = vel * -1 * 0.01;
        
        acc             += gravity;
        // acc             += wind;// / size.y;
        acc             += friction / size.y;

        vel             += acc;
        float maxSpeed  = 0.25;
        vel             = (length(vel) > maxSpeed) ? normalize(vel) * maxSpeed : vel;

        // //check edge
        if(position.y - size.y * 0.5  <= 0){
            if(_Properties[id.x].acc.w == 0){
                _Properties[id.x].acc.w = normTime;
                VATTime = 0;
            }else{
                float start     = _Properties[id.x].acc.w;
                float vatTime   = (normTime - start) / (1.0 - start);

                VATTime = vatTime;
            }
        }else{
            position        += vel;
            acc             *= 0.0;

            //  // //rotate the shape accoridng its velocity
            // float3 dir          = normalize(vel);
            // float3 up           = float3(0, 1, 0);
            // float upDotDir      = dot(up, dir);
            // float angle         = abs(acos(upDotDir));
            // float3 axis         = normalize(cross(up, dir));
            // axis                = float3(1, 0, 0);
            // rotation            = AngleAxis4x4(-time * 10.0, axis); 
        }

        // //decrease the size along the fall
        // size        *= easedFall;

        // _Properties[id.x].data.y    = saturate(easedFall);
    }else{
        size            *= easedGrowth; 
        position        = _Position[index].xyz;
        // position.y      = position.y - size.y;
        position        =  mul(_TRS, float4(position, 1)).xyz;
        vel             = float3(0, 0, 0);
        acc             = float3(0, 0, 0);
        rotation        = ortmat;
        
        _Properties[id.x].data.y    = 1.0;
    }

    float4x4 transform      = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );

    float4x4 scale         = float4x4(
        size.x, 0, 0, 0,
        0, size.y, 0, 0,
        0, 0, size.z, 0,
        0, 0, 0, 1
    );

    _Properties[id.x].trmat     = transform;
    _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].vel       = float4(vel, VATTime);
    _Properties[id.x].acc.xyz   = acc;
    _Properties[id.x].scmat     = scale;
    // _Properties[id.x].data.y    = easedLightTime;
    // _Properties[id.x].data.z    = remapFurTime;
    // _Properties[id.x].color.a   = remapAlphaTime;
}
