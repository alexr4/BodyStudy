#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshPropertiesPhysisc> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform Texture2D<float4> _BodyRamp;
uniform float2 _RampSize;
uniform  float _DeltaTime;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 trmat          = _Properties[id.x].trmat;
    float4x4 rotation       = _Properties[id.x].rotmat;
    float4x4 ortmat         = _Properties[id.x].oscmat;
    float4x4 scmat          = _Properties[id.x].scmat;

    float4 opos             = _Properties[id.x].opos;
    float3 vel              = _Properties[id.x].vel.xyz;
    float3 acc              = _Properties[id.x].acc.xyz;
    float3 position         = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    int index               = int(_Properties[id.x].data.x);
    float aloop             = _Properties[id.x].data.z;

    float rnd               = random3(float3(index, index * 1.5, index * 4.5));
    float rnd2              = random3(float3(index + 45645, index * 1563.5, index * 4687.5));
    float maxTime           = rnd * 0.5 + 1.;
    float time              = _Time + opos.w * 2.5;  
    float loop              = floor(time / maxTime);
    float mod               = 0;
    float normTime          = 0;

    if(aloop == loop) {
        mod               = time % maxTime;
        normTime          = mod / maxTime;
    }else{
        _Properties[id.x].data.z    = loop;
        normTime                    = 1;
        mod                         = 1;
        vel                      = float3(0, 0, 0);
        acc                      = float3(0, 0, 0);
           //spawn location
    }
    
    //size management
    float targetHeight  = _World.y;
    float normy         = saturate(opos.y / targetHeight);
    uint3 uvramp        = uint3(normy * _RampSize.x, 0.5 * _RampSize.y, 0);
    float rampSize      = _BodyRamp.Load(uvramp);
 
    float3 size         = _MinScale + float3(rampSize, rampSize, rampSize) * (_MaxScale - _MinScale);
    size.x              *= _ModelDescription.x;
    size.y              *= _ModelDescription.y;
    size.z              *= _ModelDescription.z;

    
    float3 offseter     = float3((index + opos.w + _Properties[id.x].data.y), (index) * 1.5 + _Properties[id.x].data.y, (index + opos.w + _Properties[id.x].data.y) * 4.5);
    float3 rndPos       = float3(random3(offseter), random3(offseter * -1.25487 + opos.w), random3(offseter * 16.15641434 + opos.w * 2.0)) * 2.0 - 1.0;
    float rndPosScale   = lerp(0.025, 0.05, opos.w);

    position       = _Position[index] + rndPos * 0.01;// * rndPosScale;
    position            = mul(_TRS, float4(position, 1)).xyz;
   
    float4x4 transform      = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );
    
    float4x4 scale         = float4x4(
        size.x  , 0     , 0     , 0,
        0       , size.y, 0     , 0,
        0       , 0     , size.z, 0,
        0       , 0     , 0     , 1
    );

    _Properties[id.x].trmat     = transform;
    // _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale;
    // _Properties[id.x].vel       = float4(vel, 0.0);
    // _Properties[id.x].acc       = float4(acc, 0.0);
    _Properties[id.x].color.a   = 1.0;
    // _Properties[id.x].data.y    = 0;
    // _Properties[id.x].data.w    = 0;
}
