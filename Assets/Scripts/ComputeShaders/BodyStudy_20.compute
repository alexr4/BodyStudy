#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshPropertiesPhysisc> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform Texture2D<float4> _BodyRamp;
uniform float2 _RampSize;
uniform  float _DeltaTime;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 trmat          = _Properties[id.x].trmat;
    float4x4 rotation       = _Properties[id.x].rotmat;
    float4x4 ortmat         = _Properties[id.x].oscmat;
    float4x4 scmat          = _Properties[id.x].scmat;

    float4 opos             = _Properties[id.x].opos;
    float3 vel              = _Properties[id.x].vel.xyz;
    float3 acc              = _Properties[id.x].acc.xyz;
    float3 position         = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    int index               = int(_Properties[id.x].data.x);

    float rnd               = random3(float3(index, index * 1.5, index * 4.5));
    float rnd2              = random3(float3(index + 45645, index * 1563.5, index * 4687.5));
    float maxTime           = 3.0;//opos.w * 0.25 + 2.0;//rnd * 10.0 + 5.0;
    float time              = _Time + opos.w * 0.5;  
    float loop              = floor(time / maxTime);
    float mod               = 0;
    float normTime          = 0;

    float aloop     = _Properties[id.x].data.z;
    if(aloop == loop) {
        mod               = time % maxTime;
        normTime          = mod / maxTime;
    }else{
        _Properties[id.x].data.z = loop;
        normTime                 = 1;
        mod                      = 1;
        // vel                      = float3(0, 0, 0);
        // acc                      = float3(0, 0, 0);
    }

    float normy         = saturate(opos.y / 1.8);
    uint3 uvramp        = uint3(normy * _RampSize.x, 0.5 * _RampSize.y, 0);
    float rampSize      = _BodyRamp.Load(uvramp);
 
    float3 size         = _MinScale + float3(rampSize, rampSize, rampSize) * (_MaxScale - _MinScale);

    
    /*
    acc += Forces / Mass;
    vel += acc;
    vel.mag <= maxSpeed
    pos += vel;
    acc *= 0;
    */

    float minMass       = 2.0;
    float maxMass       = 2.0;
    float mass          = lerp(minMass, maxMass, rampSize +  opos.w);
    float curlInc       = 2.0f;
    float curlSpeed     = 0.25f;
    float curlScale     = 0.1;
    float rndForceOff   = (rampSize +  opos.w) * 0.5;
    float minForce      = 2.0;
    float maxForce      = 10.0;
    float minSpeed      = 1.;
    float maxSpeed      = 5.0;//0.065;
    float edgeForce     = lerp(minForce, maxForce, 1.0 - rndForceOff);
    float edgeSpeed     = lerp(minSpeed, maxSpeed, rndForceOff);

    if(loop % 2 == 0){
        float3 offseter     = float3((index + opos.w), (index) * 1.5, (index + opos.w) * 4.5);
        float3 rndPos       = float3(random3(offseter), random3(offseter * -1.25487 + opos.w), random3(offseter * 16.15641434 + opos.w * 2.0)) * 2.0 - 1.0;
        float rndPosScale   = lerp(0.015, 0.035, opos.w);

        float3 target       = _Position[index] + rndPos * rndPosScale;
        target              = mul(_TRS, float4(target, 1)).xyz;
    
        float3 desired      = target - position;
        desired             *= edgeForce;
        // desired             = normalize(desired) * maxForce;

        float3 steer        = (desired - vel);
        // steer               = (length(steer) > maxSpeed) ? normalize(steer) * maxSpeed : steer;

        float3 curl          = curlNoise(position * curlInc + time * curlSpeed);

        acc                 += steer;
        acc                 += (curl * curlScale);
    }else{

        float3 gravity       = float3(0, -0.25, 0);
        float3 friction     = vel * -1 * 0.05;
        acc                 += gravity;
        acc                 += friction;

        //check edge
        if(position.y - size.y * 0.5 < 0){
            float maxDeviation  = 0.45; 
            float maxInvGravity = lerp(0.5, 0.75, 1.0 - rndForceOff);
            float randomX       = (random3(position.xyz) * 2.0 - 1.0) * maxDeviation;
            float randomZ       = (random3(position.zxy) * 2.0 - 1.0) * maxDeviation;

            float3 reflForce    = float3(randomX, 0, randomZ) * maxInvGravity;

            acc                 += reflForce;
            vel.y               *= -1.0;
            position.y          = size.y * 0.5;
        }
    }

    vel                 += acc;
    vel                 = (length(vel) > maxSpeed) ? normalize(vel) * maxSpeed : vel;
    position            += vel * 0.05;
    acc                 *= 0.0;

    float4x4 transform      = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );
    
    float4x4 scale         = float4x4(
        size.x  , 0     , 0     , 0,
        0       , size.y, 0     , 0,
        0       , 0     , size.z, 0,
        0       , 0     , 0     , 1
    );

    _Properties[id.x].trmat     = transform;
    // _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale;
    _Properties[id.x].vel       = float4(vel, 0.0);
    _Properties[id.x].acc       = float4(acc, 0.0);
    _Properties[id.x].color.a   = 1.0;
    _Properties[id.x].data.y    = 0;
    _Properties[id.x].data.w    = 0;
}
