#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"
#define PI 3.14159265359

uniform RWStructuredBuffer<MeshPropertiesPhysisc> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform Texture2D<float4> _BodyRamp;
uniform float2 _RampSize;
uniform  float _DeltaTime;
uniform float3 _Wind;
uniform float _MaxInstance;
uniform float _MaxSize;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 trmat          = _Properties[id.x].trmat;
    float4x4 rotation       = _Properties[id.x].rotmat;
    float4x4 ortmat         = _Properties[id.x].oscmat;
    float4x4 scmat          = _Properties[id.x].scmat;

    float4 opos             = _Properties[id.x].opos;
    float3 vel              = _Properties[id.x].vel.xyz;
    float3 acc              = _Properties[id.x].acc.xyz;
    float3 position         = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    int index               = int(_Properties[id.x].data.x);

    // float rnd               = random3(float3(index, index * 1.5, index * 4.5));
    // float rnd2              = random3(float3(index + 45645, index * 1563.5, index * 4687.5));
    // float maxTime           = opos.w * 2.0 + 2.0;//rnd * 10.0 + 5.0;
    float time              = _Time + opos.w * 12.0;  

    // //size management
    float normy         = saturate(opos.y / _World.y);
    uint3 uvramp        = uint3(normy * _RampSize.x, 0.5 * _RampSize.y, 0);
    float rampSize      = _BodyRamp.Load(uvramp);
 
    float3 size         = _MinScale + float3(rampSize, rampSize, rampSize) * (_MaxScale - _MinScale);
    size.x              *= _ModelDescription.x;
    size.y              *= _ModelDescription.y;
    size.z              *= _ModelDescription.z;

    
    /*
    acc += Forces / Mass;
    vel += acc;
    vel.mag <= maxSpeed
    pos += vel;
    acc *= 0;
    */
    float rndForceOff   = (rampSize +  opos.w) * 0.5;
    float minForce      = 0.75;
    float maxForce      = 0.85;
    float minSpeed      = 0.065;
    float maxSpeed      = 0.075;
    
    float minmaxForce   = 0.75;//lerp(minForce, maxForce, 1.0 - rndForceOff);
    float minmaxSpeed   = 0.075;//lerp(minSpeed, maxSpeed, rndForceOff);

    //seek
    float3 target       = _Position[index];
    target              = mul(_TRS, float4(target, 1)).xyz;

    float3 desired      = target - position;
    desired             *= minmaxForce;
    // float3 desired             = normalize(desired)* maxForce;

    float3 steer        = (desired - vel);
    steer               *= minmaxSpeed;
    // steer               = (length(steer) > maxSpeed) ? normalize(steer) * maxSpeed : steer;
    
    //separation
    float3 sep              = float3(0, 0, 0);
    int count               = 0;
    for(int i=0; i<int(_MaxInstance); i++){
        if(i != int(id.x)){
            float4x4 neitrmat       = _Properties[i].trmat;
            float4 neiopos          = _Properties[i].opos;
            float3 neivel           = _Properties[i].vel.xyz;
            float3 neiposition      = float3(neitrmat[0][3], neitrmat[1][3], neitrmat[2][3]);
            int neiindex            = int(_Properties[i].data.x);

            float neinormy          = saturate(neiopos.y / 1.8);
            uint3 neiuvramp         = uint3(neinormy * _RampSize.x, 0.5 * _RampSize.y, 0);
            float neirampSize       = _BodyRamp.Load(neiuvramp);
        
            float3 neisize          = _MinScale + float3(neirampSize, neirampSize, neirampSize) * (_MaxScale - _MinScale);
            float desiredSep        = size.y * 0.5 * _MaxSize + neisize.y * 0.5 * _MaxSize;

            float dist              = distance(position, neiposition);
            if(dist > 0 && dist < desiredSep){
                float3 diff         = position - neiposition;
                diff                = normalize(diff);
                diff                /= dist;
                sep                 += diff;
                count ++;
            }
        }
    }

    if(count > 0){
        sep     /= count;
        sep     = normalize(sep);
        sep     *= minmaxForce;
        sep     -= vel;
        sep      =(length(sep) > minmaxSpeed) ? normalize(sep) * minmaxSpeed : steer;
    }
    
    //curl
    // float curlInc           = 2.75f;
    // float curlSpeed         = 0.0005f;
    // float curlScale         = 0.001f;
    // float3 curl             = curlNoise(position * curlInc + time * curlSpeed + opos.w);
    
    float noisedCol         = noise(opos.xyz * 4.0 + opos.w);

    acc                 += steer;
    acc                 += sep;
    // acc                 += curl * curlScale;
    
    vel                 += acc;
    position            += vel * 0.2;
    acc                 *= 0.0;


    float3 dir          = normalize(vel);
    float3 up           = float3(0, 1, 0);
    float upDotDir      = dot(up, dir);
    float angle         = abs(acos(upDotDir) + PI * 0.5) + opos.w * PI;
    float3 axis         = normalize(cross(up, dir));
    rotation            = AngleAxis4x4(angle, axis);

    float4x4 transform      = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );
    
    float4x4 scale         = float4x4(
        size.x  , 0     , 0     , 0,
        0       , size.y, 0     , 0,
        0       , 0     , size.z, 0,
        0       , 0     , 0     , 1
    );

    _Properties[id.x].trmat     = transform;
    _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale;
    _Properties[id.x].vel       = float4(vel, 0.0);
    _Properties[id.x].acc       = float4(acc, 0.0);
    _Properties[id.x].color.a   = 1.0;
    _Properties[id.x].data.y    = noisedCol;
    _Properties[id.x].data.w    = 0;
}
