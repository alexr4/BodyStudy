#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"
#define PI 3.14159265359

uniform RWStructuredBuffer<MeshPropertiesPhysisc> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform Texture2D<float4> _BodyRamp;
uniform float2 _RampSize;
uniform  float _DeltaTime;
uniform float3 _Wind;
uniform float _MaxInstance;
uniform float _MaxSize;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 trmat          = _Properties[id.x].trmat;
    float4x4 rotation       = _Properties[id.x].rotmat;
    float4x4 oscmat         = _Properties[id.x].oscmat;
    float4x4 scmat          = _Properties[id.x].scmat;

    float4 opos             = _Properties[id.x].opos;
    float3 vel              = _Properties[id.x].vel.xyz;
    float3 acc              = _Properties[id.x].acc.xyz;
    float3 position         = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    float3 modelDesc        = float3(oscmat[0][0], oscmat[1][1], oscmat[2][2]);
    int index               = int(_Properties[id.x].data.x);

    
    float rnd       = random3(float3(index + opos.w, (index + opos.w) * 1.5, (index + opos.w) * 4.5));
    float maxTime   = rnd * 2.0 + 8.0;//rnd * 10.0 + 5.0;
    float time      = _Time + opos.w * 5.0;
    float mod       = (time %  maxTime);
    float normTime  = mod / maxTime;
    float loop      = floor(time / maxTime) + 1;

    float aloop     = _Properties[id.x].data.z;
    if(aloop == loop) {
        mod               = time % maxTime;
        normTime          = mod / maxTime;
    }else{
        _Properties[id.x].data.z    = loop;
        position                    = mul(_TRS, float4(_Position[index].xyz, 1)).xyz;
        normTime                    = 1;
        mod                         = 1;
        float rndvx                 = random3(position) * 2.0 - 1.0;
        float rndvy                 = random3(position + index) * 2.0 - 1.0;
        float rndvz                 = random3(position + index + opos.w) * 2.0 - 1.0;
        vel                         = float3(rndvx, rndvy, rndvz);
        acc                         = float3(0, 0, 0);
    }

    // //size management
    float normy         = saturate(opos.y / 1.8);
    uint3 uvramp        = uint3(normy * _RampSize.x, 0.5 * _RampSize.y, 0);
    float rampSize      = _BodyRamp.Load(uvramp);
 
    float3 size         = (_MinScale + rampSize * (_MaxScale - _MinScale)) * modelDesc;
    float alpha         = 0.0;
    float seq           = aloop % 2;
    // seq                 = step(0.75, random(aloop + index + opos.w));
    if(seq == 0){
         /*
        acc += Forces / Mass;
        vel += acc;
        vel.mag <= maxSpeed
        pos += vel;
        acc *= 0;
        */
        float rndForceOff   = (rampSize +  opos.w) * 0.5;
        float minSpeed      = 0.065;
        float maxSpeed      = 0.075;
        
        float minmaxSpeed   = lerp(minSpeed, maxSpeed, rndForceOff);
        
        //curl
        float noisedCol         = noise(_Time * 0.25);
        float curlInc           = 2.5f * noisedCol;
        float curlSpeed         = 0.0005f;
        float curlScale         = 0.01f;
        float3 curl             = curlNoise(position * curlInc + time * curlSpeed);
        

        acc                 += curl * curlScale;
        acc                 += float3(0, 0, -0.005);
        
        vel                 += acc;
        vel                 = (length(vel) > minmaxSpeed) ? normalize(vel) * minmaxSpeed : vel;
        position            += vel * 0.1;
        acc                 *= 0.0;

        alpha               = 1.0 - smoothstep(0.75, 1.0, normTime);
        alpha               = outQuad(alpha);

    }else{
        acc                 = float3(0, 0, 0);
        position            =  mul(_TRS, float4(_Position[index].xyz, 1)).xyz;
        
        alpha               = smoothstep(0.0, 0.1, normTime);
        alpha               = outQuad(alpha);
    } 

    size                *= alpha;

    float3 dir          = normalize(vel);
    float3 up           = float3(0, 1, 0);
    float upDotDir      = dot(up, dir);
    float angle         = acos(upDotDir);
    float3 axis         = normalize(cross(up, dir));
    rotation            = AngleAxis4x4(angle, axis);

    float4x4 transform      = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );
    
    float4x4 scale         = float4x4(
        size.x  , 0     , 0     , 0,
        0       , size.y, 0     , 0,
        0       , 0     , size.z, 0,
        0       , 0     , 0     , 1
    );

    _Properties[id.x].trmat     = transform;
    _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale;
    _Properties[id.x].vel       = float4(vel, 0.0);
    _Properties[id.x].acc       = float4(acc, 0.0);
    _Properties[id.x].color.a   = alpha;
    _Properties[id.x].data.y    = time;
    _Properties[id.x].data.w    = seq;
}
