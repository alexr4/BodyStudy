#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshPropertiesExtended> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

    float4x4 trmat  = _Properties[id.x].trmat;
    float4x4 oscmat = _Properties[id.x].oscmat;
    float4x4 scmat  = _Properties[id.x].scmat;
    float3 ascale   = float3(scmat[0][0], scmat[1][1], scmat[2][2]);
    float3 oscale   = float3(oscmat[0][0], oscmat[1][1], oscmat[2][2]);
    float3 opos     = _Properties[id.x].opos;
    int index       = int(_Properties[id.x].data.x);
    float rndPerInstance    = _Properties[id.x].data.w;

    float rnd               = random3(float3(index, index * 1.5, index * 4.5));
    float maxTime           = rndPerInstance * 2.0 + 2.0;//rnd * 10.0 + 5.0;
    float time              = _Time + rnd * 5.0;
    float mod               = (time %  maxTime);
    float normTime          = mod / maxTime;
    float loop              = floor(time / maxTime) + 1.0;
    float easedLightTime    = outCubic(normTime);
    float easedGrowth       = outElastic(normTime, 8.0);//1.0 - abs(normTime * 2.0 - 1.0));
    float remapFurTime      = smoothstep(0, 0.5, normTime);
    remapFurTime            = outCubic(remapFurTime);
    float remapAlphaTime    = 1.0 - smoothstep(0.5, 1.0, normTime);
    remapAlphaTime          = outCubic(remapAlphaTime);

    float aloop     = _Properties[id.x].data.z;
    if(aloop == loop) {
    }else{
        _Properties[id.x].data.z = loop;
    }
    
    float randPerLoop   = random(float(loop + index + rndPerInstance));
    float rndIndex      = int((randPerLoop) * (_PositionCount - 1));
    
    float3 position     = _Position[index].xyz;
    // float rndInstance   = _Properties[id.x].data.w;
    // float3 offseter     = float3((index + rndInstance), (index) * 1.5, (index + rndInstance) * 4.5);
    // float3 rndPos       = float3(random3(offseter), random3(offseter * -1.25487 + rndInstance), random3(offseter * 16.15641434 + rndInstance * 2.0)) * 2.0 - 1.0;
    // float rndPosScale   = lerp(0.015, 0.035, rndInstance);
    // position            += rndPos * rndPosScale;
    float3  vel         = normalize(position - oscale);
    float normy         = frac(saturate(opos.y / 1.8) * 1.5);
    normy               = 1.0 - abs(normy * 2.0 - 1.0);
    normy               = inoutExp(normy);

    // float3 newOriScale  = (_MinScale + randPerLoop * (_MaxScale - _MinScale)) * float3(1, 1, 1);
    float3 size         = _MinScale + float3(normy, normy, normy) * (_MaxScale - _MinScale);


    position            =  mul(_TRS, float4(position, 1)).xyz;
     float4x4 transform      = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );

     float4x4 transformVel = float4x4(
        position.x, 0, 0, vel.x,
        0, position.y, 0, vel.y,
        0, 0, position.z, vel.z,
        0, 0, 0, 1
    );

    float4x4 scale         = float4x4(
        size.x, 0, 0, 0,
        0, size.y, 0, 0,
        0, 0, size.z, 0,
        0, 0, 0, 1
    );

    _Properties[id.x].trmat     = transform;
    // _Properties[id.x].opos      = float4(position, 1.0);
    _Properties[id.x].oscmat    = transformVel;
    _Properties[id.x].scmat     = scale;
    _Properties[id.x].data.y    = easedLightTime;
    _Properties[id.x].data.z    = remapFurTime;
    _Properties[id.x].color.a   = remapAlphaTime;
}
