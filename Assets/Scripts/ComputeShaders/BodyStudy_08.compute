#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshPropertiesExtended> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;

uniform float _MaxTime;
uniform float _Thickness;
uniform float _Smoothness;
uniform float _IsTimeInverted;

// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

      float4x4 trmat  = _Properties[id.x].trmat;
    float4x4 oscmat = _Properties[id.x].oscmat;
    float4x4 scmat  = _Properties[id.x].scmat;
    float3 ascale   = float3(scmat[0][0], scmat[1][1], scmat[2][2]);
    float3 oscale   = float3(oscmat[0][0], oscmat[1][1], oscmat[2][2]);
    float3 opos     = _Properties[id.x].opos;
    int index       = int(_Properties[id.x].data.x);

    float rnd       = random3(float3(index, index * 1.5, index * 4.5));
    float time      = _Time + rnd * 10.0;
    float mod       = (_Time %  _MaxTime);
    float normTime  = mod / _MaxTime;
    float loop      = floor(_Time / _MaxTime) + 1.0;
    float easedTime = outCubic(abs(normTime * 2.0 - 1.0));

    float aloop     = _Properties[id.x].data.z;
    if(aloop == loop) {
    }else{
        _Properties[id.x].data.z = loop; 
    }

    float3 position     = _Position[index];
    float rndInstance   = _Properties[id.x].data.w;
    float3 offseter     = float3((index + rndInstance), (index) * 1.5, (index + rndInstance) * 4.5);
    float3 rndPos       = float3(random3(offseter), random3(offseter * -1.25487 + rndInstance), random3(offseter * 16.15641434 + rndInstance * 2.0)) * 2.0 - 1.0;
    float rndPosScale   = lerp(0.015, 0.035, rndInstance);
    position            += rndPos * rndPosScale;
    opos                += rndPos * rndInstance;

    float normy         = position.y / 2.0;
    float normYEdges    = lerp(0 - _Thickness - _Smoothness, 1 + _Thickness + _Smoothness, normTime);
    
    float newScale      = smoothstep(normYEdges - _Thickness - _Smoothness, normYEdges - _Thickness, normy) * 
                          (1.0 - smoothstep(normYEdges + _Thickness, normYEdges + _Thickness + _Smoothness, normy));
    if(_IsTimeInverted == 1){
        newScale = 1.0 - newScale;
    }
    // normy               = outCubic(normy);
    // normy               = lerp(0.35, 1.5, normy);
    // float3 newScale     = oscale * float3(normy, normy, normy);

    //rotate shape on a curl noise
    
    float noiseScale0   = 2.5f;
    float noiseSpeed0   = .005;

    float3 dir          = curlNoise(opos * noiseScale0 + _Time * noiseSpeed0);
    float avdir         = (dir.x + dir.y + dir.z) / 3.0;
    float3 up           = float3(0, 1, 0);
    float upDotDir      = dot(up, dir);
    float angle         = abs(acos(upDotDir));
    float3 axis         = normalize(cross(up, dir));
    float4x4 rotation   = AngleAxis4x4(_Time, axis);;

    position            =  mul(_TRS, float4(position, 1)).xyz;
    float4x4 transform = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );

    float4x4 scale = float4x4(
        newScale, 0, 0, 0,
        0, newScale, 0, 0,
        0, 0, newScale, 0,
        0, 0, 0, 1
    );

    _Properties[id.x].trmat     = transform;
    // _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale; 
    // _Properties[id.x].color.rgb = noiseColor;
    // _Properties[id.x].color.a   = min(noiseSc, easedTime);
    _Properties[id.x].data.y    = time;
    _Properties[id.x].data.z    = _Time;
}
