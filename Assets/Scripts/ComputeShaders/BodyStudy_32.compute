#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshPropertiesExtended> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform StructuredBuffer<float3> _Normal;
uniform StructuredBuffer<float4> _Tangent;
uniform int _PositionCount;
uniform int _NormalCount;
uniform int _TangentCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform float3 _Wind;

#define PI 3.14159265359

float2 GetClosestIndex(float3 position){
    float maxDist = 100000.0;
    int index = -1;
    for(int i=0; i<_PositionCount; i++){
        float3 vertPosition = _Position[i];
        vertPosition        =  mul(_TRS, float4(vertPosition, 1)).xyz;
        float dist          = distance(vertPosition, position);
        if(dist < maxDist && dist > 0.01){
            index   = i;
            maxDist = dist;
        }
    }

    return float2(index, maxDist);
}


// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

    float4x4 trmat  = _Properties[id.x].trmat;
    float4x4 oscmat = _Properties[id.x].oscmat;
    float4x4 scmat  = _Properties[id.x].scmat;
    float4x4 rotation = _Properties[id.x].rotmat;

    float3 ascale   = float3(scmat[0][0], scmat[1][1], scmat[2][2]);
    float3 oscale   = float3(oscmat[0][0], oscmat[1][1], oscmat[2][2]);
    float3 opos     = _Properties[id.x].opos;
    int index       = int(_Properties[id.x].data.x);
    float lastTime  = _Properties[id.x].data.y ;

    //Time Management
    float rnd       = random3(float3(index, index * 1.5, index * 4.5));
    float maxTime   = rnd * 8.0 + 2.0;
    float time      = (_Time + rnd * 10.0) - lastTime;
    float mod       = (_Time %  maxTime);
    float normTime  = mod / maxTime;
    float loop      = floor(_Time / maxTime) + 1.0;
    float easedTime = outCubic(abs(normTime * 2.0 - 1.0));

    float aloop     = _Properties[id.x].data.z;
    float3 position;
    float3 rndPos;
    if(aloop == loop) {
        position = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    }else{
        _Properties[id.x].data.z = loop; 

        position                    = _Position[index];
        float rndInstance           = _Properties[id.x].data.w;
        float3 offseter             = float3((index + rndInstance), (index) * 1.5, (index + rndInstance) * 4.5);
        rndPos                      = float3(random3(offseter), random3(offseter * -1.25487 + rndInstance), random3(offseter * 16.15641434 + rndInstance * 2.0)) * 2.0 - 1.0;
        float rndPosScale           = lerp(0.015, 0.035, rndInstance);
        position                    += rndPos * rndPosScale;
        
        position                    =  mul(_TRS, float4(position, 1)).xyz;
        // _Properties[id.x].data.y    = 0;
    }

    
    float2 closestIndex    = GetClosestIndex(position);
    if(closestIndex.x > -1){
        float3 tan          = _Tangent[closestIndex.x];
        // float3x3 rotTan     = AngleAxis3x3(PI * 0.5, _Tangent[closestIndex.x].xyz);
        // tan                 = mul(rotTan, tan);

        float angle         = snoise(position + _Time * 0.1) * (PI);
        float3x3 rotTan     = AngleAxis3x3(angle, _Normal[closestIndex.x]);
        tan                 = mul(rotTan, tan);

        float speed         = lerp(0.0025, 0.0075, _Properties[id.x].data.w);
        position            += normalize(tan) * 0.005;
        
        //pointing toward the direction
        angle               = noise(position + _Time) * PI + _Properties[id.x].data.w * PI;
        rotation            = AngleAxis4x4(angle + _Time * _Properties[id.x].data.w, normalize(rndPos));
    }

    if(closestIndex.y > 0.1){
        _Properties[id.x].data.y    = time;
        _Properties[id.x].data.z = loop; 
        position            = _Position[index];
        float rndInstance   = _Properties[id.x].data.w;
        float3 offseter     = float3((index + rndInstance), (index) * 1.5, (index + rndInstance) * 4.5);
        float3 rndPos       = float3(random3(offseter), random3(offseter * -1.25487 + rndInstance), random3(offseter * 16.15641434 + rndInstance * 2.0)) * 2.0 - 1.0;
        float rndPosScale   = lerp(0.015, 0.035, rndInstance);
        position            += rndPos * rndPosScale;
        
        position            =  mul(_TRS, float4(position, 1)).xyz;
        
    } 

    float3 scale = oscale * easedTime;


    float4x4 transform = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );

    float4x4 scalemat = float4x4(
        scale.x, 0, 0, 0,
        0, scale.y, 0, 0,
        0, 0, scale.z, 0,
        0, 0, 0, 1
    );


    _Properties[id.x].trmat     = transform;
    _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scalemat; 
    // _Properties[id.x].color.rgb = noiseColor;
    // _Properties[id.x].color.a   = min(noiseSc, easedTime);
    // _Properties[id.x].data.y    = time;
    // _Properties[id.x].opos      = float4(position, 1.0);
}
