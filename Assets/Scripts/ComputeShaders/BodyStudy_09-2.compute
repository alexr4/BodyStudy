#pragma kernel CSMain

#include "Assets/Scripts/ComputeShaders/DataStructs.hlsl"
#include "Assets/Scripts/Utils/maths.hlsl"
#include "Assets/Scripts/Utils/sdf3Dshape.hlsl"
#include "Assets/Scripts/Utils/sdfOperator.hlsl"
#include "Assets/Scripts/Utils/noises.hlsl"
#include "Assets/Scripts/Utils/easing.hlsl"
#include "Assets/Scripts/Utils/MatrixFormAngleAxis.hlsl"

uniform RWStructuredBuffer<MeshPropertiesExtended> _Properties;
uniform StructuredBuffer<float3> _Position;
uniform int _PositionCount;
uniform float3 _World;
uniform float3 _ModelDescription;
uniform float _MinScale;
uniform float _MaxScale;
uniform float _Time;
uniform float4x4 _TRS;
uniform float3 _Wind;


// For the sake of simplicity, only using 1000, 1, 1 threads.
[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

    float4x4 trmat  = _Properties[id.x].trmat;
    float4x4 oscmat = _Properties[id.x].oscmat;
    float4x4 scmat  = _Properties[id.x].scmat;
    float3 ascale   = float3(scmat[0][0], scmat[1][1], scmat[2][2]);
    float3 oscale   = float3(oscmat[0][0], oscmat[1][1], oscmat[2][2]);
    float3 opos     = _Properties[id.x].opos;
    int index       = int(_Properties[id.x].data.x);
    float rndInstance   = _Properties[id.x].data.w;

    float rnd       = random3(float3(index, index * 1.5, index * 4.5));
    float rnd2      = random3(float3(index + 2.541, index * 156.5, index * 0.15645));
    float maxTime   = rnd * 10 + 5.0;
    
    float time      = _Time + rnd2 * maxTime;
    float mod       = (time %  maxTime);
    float normTime  = mod / maxTime;
    float loop      = floor(time / maxTime) + 1.0;
    float easedTime = inoutQuad(1.0 - normTime);

    float rndIndex  = int(random(float(loop + index + rndInstance)) * (_PositionCount - 1));
    float aloop     = _Properties[id.x].data.z;
    float3 position;
    float3 rndPos;
    if(aloop == loop) {
        position = float3(trmat[0][3], trmat[1][3], trmat[2][3]);
    }else{
        position            = _Position[rndIndex];
        position            =  mul(_TRS, float4(position, 1)).xyz;
        
        float3 offseter     = float3((index + rndInstance), (index) * 1.5, (index + rndInstance) * 4.5);
        rndPos              = float3(random3(offseter), random3(offseter * -1.25487 + rndInstance), random3(offseter * 16.15641434 + rndInstance * 2.0)) * 2.0 - 1.0;
        float rndPosScale   = lerp(0.015, 0.035, rndInstance);
        position            += rndPos * rndPosScale;
        // opos                += rndPos * rndInstance;

        _Properties[id.x].data.z = loop; 
    }

    //movement
    float posNoiseScale = 1.25f;

    float posNoiseInc   = 0.01;
    float posNoiseSpeed = 0.1;
    float3 vel          = curlNoise(position * posNoiseScale + time * posNoiseSpeed);
    float3 svel         = vel;
    vel                 += _Wind * (1.0 + rnd2);
    vel                 += float3(0.0, -0.5, 0.0);
    position            = position + vel * posNoiseInc;

    //rotate shape on a curl noise
    float3 dir          = normalize(vel);
    float3 up           = float3(0, 1, 0);
    float upDotDir      = dot(up, dir);
    float angle         = abs(acos(upDotDir));
    float3 axis         = normalize(cross(up, dir));
    float4x4 rotation   = AngleAxis4x4(angle, axis);

    float newScale      = easedTime;

    float4x4 transform = float4x4(
        1, 0, 0, position.x, 
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );

    float4x4 scale = float4x4(
        newScale, 0, 0, 0,
        0, newScale, 0, 0,
        0, 0, newScale, 0,
        0, 0, 0, 1
    );


    _Properties[id.x].trmat     = transform;
    _Properties[id.x].rotmat    = rotation;
    _Properties[id.x].scmat     = scale; 
    // _Properties[id.x].color.rgb = noiseColor;
    // _Properties[id.x].color.a   = min(noiseSc, easedTime);
    _Properties[id.x].data.y    = 1.0 - normTime;
    // _Properties[id.x].data.z    = _Time;
}
